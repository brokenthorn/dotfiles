let mapleader=" "

set clipboard+=unnamed,ideaput " Use the system clipboard by default
set history=1000 " Keep a history of the last 1000 commands
set hlsearch " Highlight search results as you type
set idearefactormode=keep " Keep the current mode when refactoring
set ignorecase smartcase " Ignore case in search, unless an uppercase letter is used
set incsearch " Incremental search - show matches as you type
set relativenumber " Display line numbers relative to the cursor position
set scrolloff=1 " Keep at least 1 lines above and below the cursor during scrolling
set sidescrolloff=1
set showcmd " Show command being entered
set showmode " Show current mode (insert, visual, etc.) in the status line
"set notimeout
set timeoutlen=1000 " Time to wait (in milliseconds) before considering a mapped key as not part of a sequence
set visualbell " Use visual bell instead of an audible bell for notifications
set which-key " Show available keybindings after a short delay

""" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable multiple cursors
" Basic commands:
"  mc - starts multicursor
"  mc - adds next match
"  mx - skips current match
"  mp - remove current match and go back to previous one
Plug "terryma/vim-multiple-cursors"
map mc <A-n>
map mx <A-x>
map mp <A-p>

" Enables highlighted yanks
Plug "machakann/vim-highlightedyank"

" https://github.com/tpope/vim-surround/blob/master/doc/surround.txt
" Enable dealing with pairs of surroundings with all normal vim commands,
" and works with HTML tags as well.
Plug "tpope/vim-surround"

" Emulates NERDTree using the built-in project view, making navigation and
" file management from the project view easier.
" Available commands in NERDTree: https://raw.githubusercontent.com/wiki/JetBrains/ideavim/NERDTree-support.md
" Tip: use m to open the menu while in NERDTree
Plug "preservim/nerdtree"

" After block yank and paste, move cursor to the end of operated text and don't
" override register:
vnoremap p "_dP`]
nnoremap p p`]
" Keep selection when/after indenting in visual mode:
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv
" IDEA's built-in search is simply better:
nmap / <Action>(Find)

" Easy tab navigation using TAB and Shift-TAB:
nnoremap <tab> gt
nnoremap <S-tab> gT

""" Mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" WARN: Don"t remap Ctrl+; as that is used by AceJump,
" unless you remap it, see below.

" ShowHoverInfo is mapped to <leader>k by default

" Ctrl-W plus S or V add horizontal and vertical splits by default
" Ctrl-W plus H, J, K, L to move between splits comes by default
inoremap <C-s> <Esc>:wa<CR>
nnoremap <C-s> :wa<CR>

" Press TAB or Shift TAB while Ace is active to scroll screen to see all matches
" activates Ace Target Mode, selects entire word
nmap F <Action>(AceTargetAction)
" activates Ace
nmap ff <Action>(AceAction)
" activates Ace Line Mode
nmap fl <Action>(AceLineAction)
nmap g( <Action>(GotoPrevElementUnderCaretUsage)
nmap g) <Action>(GotoNextElementUnderCaretUsage)
nmap g[d <Action>(GotoPreviousError)
nmap g]d <Action>(GotoNextError)
nmap g[m <Action>(MethodUp)
nmap g]m <Action>(MethodDown)
nmap g[c <Action>(GotoPreviousChange)
nmap g]c <Action>(GotoNextChange)
nmap gd <Action>(GotoDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gr <Action>(GotoRelatedSymbol)
nmap gs <Action>(GotoSuperMethod)
nmap gt <Action>(GotoTest)
nmap gu <Action>(FindUsages)

nmap <leader>cb <Action>(CommentByBlockComment)
nmap <leader>cc <Action>(CommentByLineComment)
vmap <leader>cb <Action>(CommentByBlockComment)
vmap <leader>cc <Action>(CommentByLineComment)

nmap <leader>e :NERDTreeFocus<CR>
nmap <leader>ee <Action>(ShowErrorDescription)
nmap <leader>ff <Action>(GotoFile)
nmap <leader>fs <Action>(FileStructurePopup)
nmap <leader>fw <Action>(FindInPath)
nmap <leader>fm <Action>(ReformatCode)

nmap <leader>hh <Action>(QuickImplementations)
nmap <leader>hu <Action>(HighlightUsagesInFile)
nmap <leader>oi <Action>(OptimizeImports)
nmap <leader>ra <Action>(RenameElement)
nmap <leader>rl <Action>(RecentLocations)
nmap <leader>rr <Action>(Refactorings.QuickListPopupAction)

vmap <leader>ww <Action>(com.andrewbrookins.idea.wrap.WrapAction)
nmap <leader>ww <Action>(com.andrewbrookins.idea.wrap.WrapParagraphAction)

nmap <leader>x <Action>(CloseEditor)
nnoremap <leader><cr> :nohlsearch<cr>
vmap <leader>sw <Action>(SurroundWith)
